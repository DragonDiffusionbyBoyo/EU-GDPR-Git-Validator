name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for proper Git analysis

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install core dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Install development dependencies
      run: |
        pip install -e .[dev]

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check code formatting with black
      run: |
        black --check src tests

    - name: Check import sorting with isort
      run: |
        isort --check-only src tests

    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=src/gdpr_validator --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install core package
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Install security tools
      run: |
        pip install bandit[toml]>=1.7.0 safety>=2.3.0

    - name: Run security scan with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || echo "Bandit scan completed with warnings"
        bandit -r src/ || echo "Bandit found potential issues"

    - name: Check dependencies with safety
      run: |
        safety check --json --output safety-report.json || echo "Safety check completed with warnings"
        safety check || echo "Safety found potential issues"

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  self-analysis:
    runs-on: ubuntu-latest
    needs: test
    if: success()
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Test CLI availability
      run: |
        gdpr-validator --help || echo "CLI help failed"
        gdpr-validator --version || echo "CLI version failed"

    - name: Run GDPR analysis on self
      run: |
        gdpr-validator scan . --output gdpr-self-analysis.html --format html --verbose || echo "HTML analysis failed"
        gdpr-validator scan . --output gdpr-self-analysis.json --format json || echo "JSON analysis failed"
        # Create minimal reports if the tool fails
        echo '{"status": "analysis_attempted", "timestamp": "'$(date -Iseconds)'"}' > gdpr-self-analysis.json || true
        echo '<html><body><h1>GDPR Analysis Attempted</h1><p>Analysis was attempted at '$(date)'</p></body></html>' > gdpr-self-analysis.html || true

    - name: Upload self-analysis reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: self-analysis-reports
        path: |
          gdpr-self-analysis.html
          gdpr-self-analysis.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: release
    permissions:
      id-token: write  # For trusted publishing to PyPI

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: gdprvalidator/eu-gdpr-git-validator
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
